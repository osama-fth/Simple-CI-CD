name: SIMPLE-CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-audit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: app/package-lock.json
      - name: Install deps
        run: npm install
      - name: Security audit (fail high/critical)
        run: |
          set -e
          npm audit --audit-level=high || (echo "Vulnerabilità >=high trovate" && exit 1)
      - name: Lint
        run: npm run lint

  build-and-scan-and-test:
    runs-on: ubuntu-latest
    needs: lint-and-audit
    steps:
      - uses: actions/checkout@v4

      - name: Copy .env from example
        run: cp .env.example .env

      - name: Compose build 
        run: docker compose up -d --build 
    
      - name: Get app image ref
        id: appimg
        run: |
          cid="$(docker compose ps -q app)"
          ref="$(docker inspect -f '{{.Config.Image}}' "$cid")"
          echo "ref=$ref" >> "$GITHUB_OUTPUT"

      - name: Trivy scan app image (HIGH,CRITICAL)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ steps.appimg.outputs.ref }}
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          ignore-unfixed: true
          output: 

      - name: Trivy scan postgres:latest (HIGH,CRITICAL)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'postgres:latest'
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          ignore-unfixed: true

      - name: Wait for DB readiness
        run: |
          for i in $(seq 1 30); do
            docker compose exec -T db pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_HOST} && exit 0
            sleep 2
          done
          echo "DB non pronto entro il timeout"; docker compose logs db; exit 1

      - name: Wait for app readiness (HTTP 200 /)
        run: |
          for i in $(seq 1 30); do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${PORT}/ || true)
            if [ "$code" = "200" ]; then
              exit 0
            fi
            sleep 2
          done
          echo "App non pronta"; docker compose logs app; exit 1

      - name: Run integration tests
        run: docker compose exec -T app npm run test

      - name: Cleanup
        if: always()
        run: docker compose down -v
        
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-scan-and-test
    steps:
      - name: Deploy (simulato)
        run: echo "Simulazione deploy può avvenire su VPS o su un PaaS."

